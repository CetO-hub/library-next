import Head from "next/head";
import Link from "next/link";
import Books from "../src/components/Books";
import { AiOutlineSearch } from "react-icons/ai";
import Header from "../src/components/Header";
import { useState, useEffect } from "react";
import bookPile from "../src/assets/PNG/book_pile.png";
import Image from "next/image";
import local from "./local";

export default function Home() {
  const [books, setBooks] = useState([]);
  const [searchBook, setSearchBook] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [localList, setLocalList] = useState(
    JSON.parse(localStorage.getItem("books")) || []
  );
  const [serverList, setServerList] = useState([]);

  useEffect(() => {
    localStorage.setItem("books", JSON.stringify(localList));
  }, [localList]);

  const bookElement = books.docs?.map((book) => {
    return (
      <Books
        key={book.key}
        id={book.key}
        cover={book.cover_edition_key}
        title={book.title}
        author={
          Array.isArray(book.author_name) ? book.author_name[0] : "No author"
        }
        year={book.first_publish_year}
        saveLocal={saveLocal}
        saveServer={saveServer}
      />
    );
  });

  function handleChange(e) {
    const { value } = e.target;
    setSearchBook(value);
  }

  function handleSubmit() {
    const url = `http://openlibrary.org/search.json?q=${searchBook}`;
    fetch(url)
      .then((res) => {
        if (!res.ok) {
          throw Error("Something went wrong");
        }
        setIsLoading(true);
        return res.json();
      })
      .then((data) => {
        setBooks(data);
        setIsLoading(false);
      })
      .catch((err) => console.log(err));
  }

  function saveLocal(id) {
    const book = books.docs.find((item) => item.key === id);
    console.log(book);
    setLocalList((oldState) => {
      return [...oldState, book];
    });
  }

  function saveServer(id) {
    console.log(id);
  }

  console.log(localList);

  return (
    <>
      <div>
        <Head>
          <title>Markbuk</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
      </div>
      <main>
        <Header />
        <div className="h-[calc(100vh-100px)] w-full flex flex-col justify-start mt-20 items-start">
          <h1 className="font-bold text-5xl">Keep track of your books</h1>
          <p className="text-lg mt-4">
            Search for books in the library and save it in the matter of seconds
            temporarily in your browser or long term in your account.
          </p>
          <div className="relative  flex mt-4 gap-4">
            <Link href="/server">
              <button className="bg-[#75b6d1] hover:opacity-80 px-4 py-2 rounded-full text-lg">
                Create account
              </button>
            </Link>
            <Link href="/local">
              <button className="bg-[#75b6d1]/30 hover:opacity-80 px-4 py-2 rounded-full text-lg">
                Save books
              </button>
            </Link>
            <div className="absolute w-full -bottom-[242px] -right-[159px] -z-10 opacity-30">
              <Image
                className="-z-10"
                src={bookPile}
                objectFit="contain"
                height={600}
                width={400}
              />
            </div>
          </div>
        </div>

        {/* search */}
        <div className="flex flex-col items-center">
          <label className="block text-xl font-bold" htmlFor="search">
            Enter a book title
          </label>
          <div className="mt-4 relative">
            <AiOutlineSearch
              size={25}
              className="inline-block absolute top-1 left-2"
            />
            <input
              className="bg-[#d9ebf2] rounded-3xl pl-9 pr-20 py-1 focus:outline-[#337a99] outline-black outline-2 outline-double peer"
              type="text"
              id="search"
              name="book"
              value={searchBook}
              onChange={handleChange}
            />
            <button
              onClick={handleSubmit}
              className="h-full absolute right-2 top-0 border-l-2 border-l-black/50 pl-1 peer-focus:border-l-[#337a99]"
            >
              Search
            </button>
          </div>
        </div>

        {/* display */}
        {isLoading && (
          <div className="z-10 fixed left-0 top-0 w-screen h-screen bg-black/60 flex justify-center items-center text-lg font-bold text-white">
            <div className="flex flex-col items-center">
              <div className="w-10 h-10 rounded-full border-4 border-t-black/40 animate-spin"></div>
              <div className="mt-4">Loading</div>
            </div>
          </div>
        )}
        <div className="grid grid-cols-3 gap-2 mt-4 ">{bookElement}</div>
        {books.start <= books.num_found ? (
          <div className="mt-4 w-full mx-auto text-center">Next</div>
        ) : (
          ""
        )}
      </main>
    </>
  );
}
